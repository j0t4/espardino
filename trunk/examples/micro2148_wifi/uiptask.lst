   1              		.code	16
   2              		.file	"uiptask.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.global	uip_task_FastPoll
  13              		.code	16
  14              		.thumb_func
  16              	uip_task_FastPoll:
  17              	.LFB2:
  18              		.file 1 "uiptask.c"
   1:uiptask.c     **** 
   2:uiptask.c     **** /*
   3:uiptask.c     ****  * Modified from an original work that is Copyright (c) 2001-2003, Adam Dunkels.
   4:uiptask.c     ****  * All rights reserved.
   5:uiptask.c     ****  *
   6:uiptask.c     ****  * Redistribution and use in source and binary forms, with or without
   7:uiptask.c     ****  * modification, are permitted provided that the following conditions
   8:uiptask.c     ****  * are met:
   9:uiptask.c     ****  * 1. Redistributions of source code must retain the above copyright
  10:uiptask.c     ****  *    notice, this list of conditions and the following disclaimer.
  11:uiptask.c     ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:uiptask.c     ****  *    notice, this list of conditions and the following disclaimer in the
  13:uiptask.c     ****  *    documentation and/or other materials provided with the distribution.
  14:uiptask.c     ****  * 3. The name of the author may not be used to endorse or promote
  15:uiptask.c     ****  *    products derived from this software without specific prior
  16:uiptask.c     ****  *    written permission.
  17:uiptask.c     ****  *
  18:uiptask.c     ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  19:uiptask.c     ****  * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  20:uiptask.c     ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:uiptask.c     ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  22:uiptask.c     ****  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  23:uiptask.c     ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  24:uiptask.c     ****  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:uiptask.c     ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  26:uiptask.c     ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  27:uiptask.c     ****  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  28:uiptask.c     ****  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:uiptask.c     ****  *
  30:uiptask.c     ****  * This file is part of the uIP TCP/IP stack.
  31:uiptask.c     ****  *
  32:uiptask.c     ****  */
  33:uiptask.c     **** 
  34:uiptask.c     **** //
  35:uiptask.c     **** //  Standard includes
  36:uiptask.c     **** //
  37:uiptask.c     **** #include <stdlib.h>
  38:uiptask.c     **** #include <stdio.h>
  39:uiptask.c     **** 
  40:uiptask.c     **** #ifdef USE_FREERTOS
  41:uiptask.c     **** #include <freertos/FreeRTOS.h>
  42:uiptask.c     **** #include <freertos/semphr.h>
  43:uiptask.c     **** #include <freertos/task.h>
  44:uiptask.c     **** #endif
  45:uiptask.c     **** 
  46:uiptask.c     **** #include <micro214x.h>
  47:uiptask.c     **** #include <rtc.h>
  48:uiptask.c     **** 
  49:uiptask.c     **** #undef HTONS
  50:uiptask.c     **** 
  51:uiptask.c     **** #include <netif.h>
  52:uiptask.c     **** #include "uip/uip.h"
  53:uiptask.c     **** #include "uip/uip_arp.h"
  54:uiptask.c     **** #include "apps/dhcpc/dhcpc.h"
  55:uiptask.c     **** #include "uiptask.h"
  56:uiptask.c     **** 
  57:uiptask.c     **** //
  58:uiptask.c     **** //  The start of the uIP buffer, which will contain the frame headers
  59:uiptask.c     **** //
  60:uiptask.c     **** #define pucUIP_Buffer ((struct uip_eth_hdr *) &uip_buf [0])
  61:uiptask.c     **** 
  62:uiptask.c     **** //
  63:uiptask.c     **** //  uIP update frequencies
  64:uiptask.c     **** //
  65:uiptask.c     **** 
  66:uiptask.c     **** #ifdef USE_FREERTOS
  67:uiptask.c     **** #define RT_CLOCK_SECOND   (configTICK_RATE_HZ)
  68:uiptask.c     **** xTaskHandle xUIPTaskHandle;
  69:uiptask.c     **** static xQueueHandle xFastPollQueue = NULL;
  70:uiptask.c     **** #else
  71:uiptask.c     **** #define RT_CLOCK_SECOND   (1000)
  72:uiptask.c     **** #define xTaskGetTickCount  t1_get_ms
  73:uiptask.c     **** #define vTaskDelay(x)	   delay_ms(x)
  74:uiptask.c     **** #endif
  75:uiptask.c     **** 
  76:uiptask.c     **** #define uipARP_FREQUENCY  (1000/8)
  77:uiptask.c     **** #define uipMAX_BLOCK_TIME (4)
  78:uiptask.c     **** 
  79:uiptask.c     **** 
  80:uiptask.c     **** u8_t uip_buf [UIP_BUFSIZE + 8] __attribute__ ((aligned (4)));
  81:uiptask.c     **** 
  82:uiptask.c     **** static int useDHCP = TRUE;
  83:uiptask.c     **** static netif *netIF;
  84:uiptask.c     **** static int uip_task_last_linked = 0;
  85:uiptask.c     **** 
  86:uiptask.c     **** unsigned int xCurrentTime;
  87:uiptask.c     **** unsigned int xStartTime;
  88:uiptask.c     **** unsigned int xARPTimer;
  89:uiptask.c     **** 
  90:uiptask.c     **** int uip_task_init(int use_dhcp, netif *pnetIF)
  91:uiptask.c     **** {
  92:uiptask.c     **** 	netIF = pnetIF;
  93:uiptask.c     **** 	useDHCP = use_dhcp;
  94:uiptask.c     **** 
  95:uiptask.c     **** #ifdef USE_FREERTOS
  96:uiptask.c     **** 	  if (!xFastPollQueue)
  97:uiptask.c     **** 	    xFastPollQueue = xQueueCreate (1, (unsigned portBASE_TYPE) sizeof (struct uip_conn *));
  98:uiptask.c     **** #endif
  99:uiptask.c     **** 
 100:uiptask.c     ****     uip_init ();
 101:uiptask.c     ****     uip_arp_init ();
 102:uiptask.c     **** 
 103:uiptask.c     ****     xStartTime =   xTaskGetTickCount();
 104:uiptask.c     ****     xARPTimer = 0;
 105:uiptask.c     **** 
 106:uiptask.c     **** }
 107:uiptask.c     **** 
 108:uiptask.c     **** int uip_task_process()
 109:uiptask.c     **** {
 110:uiptask.c     **** 	int is_linked;
 111:uiptask.c     **** 
 112:uiptask.c     **** 	is_linked = netIF->is_linked();
 113:uiptask.c     **** 
 114:uiptask.c     **** 	if (is_linked!=uip_task_last_linked)
 115:uiptask.c     **** 	{
 116:uiptask.c     **** 		uip_task_last_linked=is_linked;
 117:uiptask.c     **** 
 118:uiptask.c     **** 		if (is_linked)
 119:uiptask.c     **** 		{
 120:uiptask.c     **** 		  memcpy(uip_ethaddr.addr,netIF->get_mac_address(),6);
 121:uiptask.c     **** 		  if (useDHCP)
 122:uiptask.c     **** 		  {
 123:uiptask.c     **** 
 124:uiptask.c     **** 			dhcpc_init (uip_ethaddr.addr, sizeof (uip_ethaddr.addr));
 125:uiptask.c     **** 			dhcpc_request ();
 126:uiptask.c     **** 		  }
 127:uiptask.c     **** 
 128:uiptask.c     **** 		}
 129:uiptask.c     **** 		else
 130:uiptask.c     **** 		{
 131:uiptask.c     **** 			// we got disconnected, ask the interface to link again
 132:uiptask.c     **** 			netIF->relink();
 133:uiptask.c     **** 		}
 134:uiptask.c     **** 
 135:uiptask.c     **** 	}
 136:uiptask.c     **** 
 137:uiptask.c     **** 
 138:uiptask.c     **** 	/* this will yield processor if we're using freertos enabled driver */
 139:uiptask.c     **** 
 140:uiptask.c     **** 	netIF->wait_data(uipMAX_BLOCK_TIME);
 141:uiptask.c     **** 
 142:uiptask.c     **** 	netIF->process();  /* do internal processes of the driver */
 143:uiptask.c     **** 
 144:uiptask.c     **** 	uip_len = netIF->rx_data(uip_buf,UIP_BUFSIZE);
 145:uiptask.c     **** 
 146:uiptask.c     **** 	/*****************************************************************************************/
 147:uiptask.c     **** 
 148:uiptask.c     **** 	if (uip_len>0)
 149:uiptask.c     ****     {
 150:uiptask.c     ****         /* if the incomming packet is IP handle ARP, then IP */
 151:uiptask.c     **** 
 152:uiptask.c     ****         if (pucUIP_Buffer->type == htons (UIP_ETHTYPE_IP))
 153:uiptask.c     ****         {
 154:uiptask.c     ****           uip_arp_ipin ();
 155:uiptask.c     ****           uip_input ();
 156:uiptask.c     **** 
 157:uiptask.c     ****           /* If the above function invocation resulted in data that
 158:uiptask.c     ****              should be sent out on the network, the global variable
 159:uiptask.c     ****              uip_len is set to a value > 0. */
 160:uiptask.c     ****           if (uip_len > 0)
 161:uiptask.c     ****           {
 162:uiptask.c     ****             uip_arp_out ();
 163:uiptask.c     ****             netIF->tx_data((unsigned char *)uip_buf,uip_len);
 164:uiptask.c     ****           }
 165:uiptask.c     ****         } /* if the incoming packet is ARP type then let UIP handle it for ARP */
 166:uiptask.c     ****         else if (pucUIP_Buffer->type == htons (UIP_ETHTYPE_ARP))
 167:uiptask.c     ****         {
 168:uiptask.c     ****           uip_arp_arpin ();
 169:uiptask.c     **** 
 170:uiptask.c     ****           if (uip_len > 0)
 171:uiptask.c     **** 			netIF->tx_data((unsigned char *)uip_buf,uip_len);
 172:uiptask.c     **** 
 173:uiptask.c     ****         }
 174:uiptask.c     ****     }
 175:uiptask.c     ****     else
 176:uiptask.c     ****     {
 177:uiptask.c     **** #ifdef USE_FREERTOS
 178:uiptask.c     ****       struct uip_conn *conn;
 179:uiptask.c     ****       if (xFastPollQueue && (xQueueReceive (xFastPollQueue, &conn, 0) == pdTRUE))
 180:uiptask.c     ****       {
 181:uiptask.c     ****         uip_poll_conn (conn);
 182:uiptask.c     **** 
 183:uiptask.c     ****         if (uip_len > 0)
 184:uiptask.c     ****         {
 185:uiptask.c     ****             uip_arp_out ();
 186:uiptask.c     **** 			netIF->tx_data((unsigned char *)uip_buf,uip_len);
 187:uiptask.c     ****         }
 188:uiptask.c     ****       }
 189:uiptask.c     **** #endif
 190:uiptask.c     **** 
 191:uiptask.c     ****       /* The poll function returned 0, so no packet was
 192:uiptask.c     ****          received. Instead we check if it is time that we do the
 193:uiptask.c     ****          periodic processing. */
 194:uiptask.c     ****       xCurrentTime = xTaskGetTickCount ();
 195:uiptask.c     **** 
 196:uiptask.c     ****       if ((xCurrentTime - xStartTime) >= RT_CLOCK_SECOND)
 197:uiptask.c     ****       {
 198:uiptask.c     **** 
 199:uiptask.c     ****     	int i;
 200:uiptask.c     **** 
 201:uiptask.c     ****         /* Reset the timer. */
 202:uiptask.c     ****         xStartTime = xCurrentTime;
 203:uiptask.c     **** 
 204:uiptask.c     ****         /* Periodic check of all connections. */
 205:uiptask.c     ****         for (i = 0; i < UIP_CONNS; i++)
 206:uiptask.c     ****         {
 207:uiptask.c     ****           uip_periodic (i);
 208:uiptask.c     **** 
 209:uiptask.c     ****           /* If the above function invocation resulted in data that
 210:uiptask.c     ****              should be sent out on the network, the global variable
 211:uiptask.c     ****              uip_len is set to a value > 0. */
 212:uiptask.c     ****           if (uip_len > 0)
 213:uiptask.c     ****           {
 214:uiptask.c     ****               uip_arp_out ();
 215:uiptask.c     ****               netIF->tx_data((unsigned char *)uip_buf,uip_len);
 216:uiptask.c     ****           }
 217:uiptask.c     ****         }
 218:uiptask.c     **** 
 219:uiptask.c     **** 		/* check for UDP connections , may be they have data to be sent too */
 220:uiptask.c     **** #if UIP_UDP
 221:uiptask.c     ****         for (i = 0; i < UIP_UDP_CONNS; i++)
 222:uiptask.c     ****         {
 223:uiptask.c     ****           uip_udp_periodic (i);
 224:uiptask.c     **** 
 225:uiptask.c     ****           /* If the above function invocation resulted in data that
 226:uiptask.c     ****              should be sent out on the network, the global variable
 227:uiptask.c     ****              uip_len is set to a value > 0. */
 228:uiptask.c     ****           if (uip_len > 0)
 229:uiptask.c     ****           {
 230:uiptask.c     ****               uip_arp_out ();
 231:uiptask.c     ****               netIF->tx_data((unsigned char *)uip_buf,uip_len);
 232:uiptask.c     ****           }
 233:uiptask.c     ****         }
 234:uiptask.c     **** #endif /* UIP_UDP */
 235:uiptask.c     **** 
 236:uiptask.c     ****         /* Periodically call the ARP timer function. */
 237:uiptask.c     ****         if (++xARPTimer == uipARP_FREQUENCY)
 238:uiptask.c     ****         {
 239:uiptask.c     ****           uip_arp_timer ();
 240:uiptask.c     ****           xARPTimer = 0;
 241:uiptask.c     ****         }
 242:uiptask.c     ****       } /*  if ((xCurrentTime - xStartTime) >= RT_CLOCK_SECOND) */
 243:uiptask.c     ****     } /* if data received {..} else { */
 244:uiptask.c     **** }
 245:uiptask.c     **** 
 246:uiptask.c     **** //
 247:uiptask.c     **** //
 248:uiptask.c     **** //
 249:uiptask.c     **** void uip_task_FastPoll (struct uip_conn *conn)
 250:uiptask.c     **** {
  19              		.loc 1 250 0
  20              		.cfi_startproc
  21              	.LVL0:
 251:uiptask.c     **** #ifdef USE_FREERTOS
 252:uiptask.c     ****   if (xFastPollQueue)
 253:uiptask.c     ****     xQueueSend (xFastPollQueue, &conn, portMAX_DELAY);
 254:uiptask.c     **** #endif
 255:uiptask.c     **** }
  22              		.loc 1 255 0
  23              		@ sp needed for prologue
  24 0000 7047     		bx	lr
  25              		.cfi_endproc
  26              	.LFE2:
  28 0002 C046     		.align	2
  29              		.global	dhcpc_configured
  30              		.code	16
  31              		.thumb_func
  33              	dhcpc_configured:
  34              	.LFB5:
 256:uiptask.c     **** 
 257:uiptask.c     **** 
 258:uiptask.c     **** void dispatch_tcp_appcall_uip(void);
 259:uiptask.c     **** void dispatch_udp_appcall_uip(void);
 260:uiptask.c     **** void dhcpc_configured_uip (const dhcpcState_t *s);
 261:uiptask.c     **** 
 262:uiptask.c     **** void dispatch_tcp_appcall (void)
 263:uiptask.c     **** {
 264:uiptask.c     **** 	dispatch_tcp_appcall_uip();
 265:uiptask.c     **** }
 266:uiptask.c     **** 
 267:uiptask.c     **** void dispatch_udp_appcall (void)
 268:uiptask.c     **** {
 269:uiptask.c     **** 
 270:uiptask.c     ****   if (uip_udp_conn->rport == HTONS (DHCPC_SERVER_PORT))
 271:uiptask.c     ****     dhcpc_appcall ();
 272:uiptask.c     **** 
 273:uiptask.c     ****    resolv_appcall();
 274:uiptask.c     **** 
 275:uiptask.c     ****    dispatch_udp_appcall_uip();
 276:uiptask.c     **** 
 277:uiptask.c     **** }
 278:uiptask.c     **** 
 279:uiptask.c     **** /*
 280:uiptask.c     **** void no_dhcp_config()
 281:uiptask.c     **** {
 282:uiptask.c     **** 	uip_ipaddr_t addr;
 283:uiptask.c     **** 
 284:uiptask.c     ****  uip_ipaddr(&addr, 169,254,1,2);
 285:uiptask.c     ****  uip_sethostaddr(&addr);
 286:uiptask.c     **** 
 287:uiptask.c     ****  uip_ipaddr(&addr, 255,255,0,0);
 288:uiptask.c     ****  uip_setnetmask(&addr);
 289:uiptask.c     **** 
 290:uiptask.c     ****  uip_ipaddr(&addr, 169,254,1,1);
 291:uiptask.c     ****  uip_setdraddr(&addr);
 292:uiptask.c     **** 
 293:uiptask.c     ****   uip_ipaddr(&addr, 194,179,1,100);
 294:uiptask.c     ****  uip_setdraddr(&addr);
 295:uiptask.c     **** 
 296:uiptask.c     ****  httpd_init();
 297:uiptask.c     ****  resolv_init();
 298:uiptask.c     ****  streamer_init();
 299:uiptask.c     **** }
 300:uiptask.c     **** */
 301:uiptask.c     **** void dhcpc_configured (const dhcpcState_t *s)
 302:uiptask.c     **** {
  35              		.loc 1 302 0
  36              		.cfi_startproc
  37 0004 10B5     		push	{r4, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41              	.LVL1:
 303:uiptask.c     ****   if (!s->ipaddr [0] && !s->ipaddr [1])
  42              		.loc 1 303 0
  43 0006 836A     		ldr	r3, [r0, #40]
  44              		.loc 1 302 0
  45 0008 041C     		mov	r4, r0
  46              		.loc 1 303 0
  47 000a 002B     		cmp	r3, #0
  48 000c 1CD0     		beq	.L5
  49              	.LVL2:
 304:uiptask.c     ****   {
 305:uiptask.c     ****  //   xprintf ("Can't get address via DHCP and no static address configured, stopping uIP task\n");
 306:uiptask.c     **** 
 307:uiptask.c     ****   }
 308:uiptask.c     ****   else
 309:uiptask.c     ****     {
 310:uiptask.c     **** 	  /*
 311:uiptask.c     ****     xprintf ("\nIP address via DHCP is %d.%d.%d.%d\n", uip_ipaddr1 (s->ipaddr), uip_ipaddr2 (s->ipa
 312:uiptask.c     **** 	xprintf ("Netmask via DHCP is %d.%d.%d.%d\n", uip_ipaddr1 (s->netmask), uip_ipaddr2 (s->netmask), 
 313:uiptask.c     **** 	xprintf ("Router  via DHCP is %d.%d.%d.%d\n", uip_ipaddr1 (s->default_router), uip_ipaddr2 (s->def
 314:uiptask.c     **** 	xprintf ("DNS     via DHCP is %d.%d.%d.%d\n", uip_ipaddr1 (s->dnsaddr), uip_ipaddr2 (s->dnsaddr), 
 315:uiptask.c     **** */
 316:uiptask.c     ****     uip_sethostaddr (s->ipaddr);
  50              		.loc 1 316 0
  51 000e 028D     		ldrh	r2, [r0, #40]
  52 0010 0F4B     		ldr	r3, .L7
  53 0012 1A80     		strh	r2, [r3]
  54 0014 428D     		ldrh	r2, [r0, #42]
  55 0016 5A80     		strh	r2, [r3, #2]
 317:uiptask.c     ****     uip_setnetmask (s->netmask);
  56              		.loc 1 317 0
  57 0018 0E4B     		ldr	r3, .L7+4
  58 001a 828D     		ldrh	r2, [r0, #44]
  59 001c 1A80     		strh	r2, [r3]
  60 001e C28D     		ldrh	r2, [r0, #46]
  61 0020 5A80     		strh	r2, [r3, #2]
 318:uiptask.c     ****     uip_setdraddr (s->default_router);
  62              		.loc 1 318 0
  63 0022 0D4B     		ldr	r3, .L7+8
  64 0024 828E     		ldrh	r2, [r0, #52]
  65 0026 1A80     		strh	r2, [r3]
  66 0028 C28E     		ldrh	r2, [r0, #54]
  67 002a 5A80     		strh	r2, [r3, #2]
 319:uiptask.c     ****     uip_setsntpaddr (s->sntpaddr);
  68              		.loc 1 319 0
  69 002c 0B4B     		ldr	r3, .L7+12
  70 002e 028F     		ldrh	r2, [r0, #56]
  71 0030 1A80     		strh	r2, [r3]
  72 0032 428F     		ldrh	r2, [r0, #58]
  73 0034 5A80     		strh	r2, [r3, #2]
 320:uiptask.c     ****     uip_settimeoffset (&s->timeoffset);
  74              		.loc 1 320 0
  75 0036 C26B     		ldr	r2, [r0, #60]
  76 0038 094B     		ldr	r3, .L7+16
 321:uiptask.c     **** 
 322:uiptask.c     **** 
 323:uiptask.c     **** 	resolv_conf(s->dnsaddr);
  77              		.loc 1 323 0
  78 003a 3030     		add	r0, r0, #48
  79              		.loc 1 320 0
  80 003c 1A60     		str	r2, [r3]
  81              		.loc 1 323 0
  82 003e FFF7FEFF 		bl	resolv_conf
 324:uiptask.c     **** 	dhcp_configured_uip(s);
  83              		.loc 1 324 0
  84 0042 201C     		mov	r0, r4
  85 0044 FFF7FEFF 		bl	dhcp_configured_uip
  86              	.LVL3:
  87              	.L5:
 325:uiptask.c     **** 
 326:uiptask.c     ****   }
 327:uiptask.c     **** }
  88              		.loc 1 327 0
  89              		@ sp needed for prologue
  90              	.LVL4:
  91 0048 10BC     		pop	{r4}
  92 004a 01BC     		pop	{r0}
  93 004c 0047     		bx	r0
  94              	.L8:
  95 004e C046     		.align	2
  96              	.L7:
  97 0050 00000000 		.word	uip_hostaddr
  98 0054 00000000 		.word	uip_netmask
  99 0058 00000000 		.word	uip_draddr
 100 005c 00000000 		.word	uip_sntpaddr
 101 0060 00000000 		.word	uip_timeoffset
 102              		.cfi_endproc
 103              	.LFE5:
 105              		.align	2
 106              		.global	dispatch_udp_appcall
 107              		.code	16
 108              		.thumb_func
 110              	dispatch_udp_appcall:
 111              	.LFB4:
 112              		.loc 1 268 0
 113              		.cfi_startproc
 114 0064 00B5     		push	{lr}
 115              		.cfi_def_cfa_offset 4
 116              		.cfi_offset 14, -4
 117              		.loc 1 270 0
 118 0066 074B     		ldr	r3, .L12
 119 0068 1A68     		ldr	r2, [r3]
 120 006a 8623     		mov	r3, #134
 121 006c D288     		ldrh	r2, [r2, #6]
 122 006e DB01     		lsl	r3, r3, #7
 123 0070 9A42     		cmp	r2, r3
 124 0072 01D1     		bne	.L10
 125              		.loc 1 271 0
 126 0074 FFF7FEFF 		bl	dhcpc_appcall
 127              	.L10:
 128              		.loc 1 273 0
 129 0078 FFF7FEFF 		bl	resolv_appcall
 130              		.loc 1 277 0
 131              		@ sp needed for prologue
 132              		.loc 1 275 0
 133 007c FFF7FEFF 		bl	dispatch_udp_appcall_uip
 134              		.loc 1 277 0
 135 0080 01BC     		pop	{r0}
 136 0082 0047     		bx	r0
 137              	.L13:
 138              		.align	2
 139              	.L12:
 140 0084 00000000 		.word	uip_udp_conn
 141              		.cfi_endproc
 142              	.LFE4:
 144              		.align	2
 145              		.global	dispatch_tcp_appcall
 146              		.code	16
 147              		.thumb_func
 149              	dispatch_tcp_appcall:
 150              	.LFB3:
 151              		.loc 1 263 0
 152              		.cfi_startproc
 153 0088 00B5     		push	{lr}
 154              		.cfi_def_cfa_offset 4
 155              		.cfi_offset 14, -4
 156              		.loc 1 264 0
 157 008a FFF7FEFF 		bl	dispatch_tcp_appcall_uip
 158              		.loc 1 265 0
 159              		@ sp needed for prologue
 160 008e 01BC     		pop	{r0}
 161 0090 0047     		bx	r0
 162              		.cfi_endproc
 163              	.LFE3:
 165 0092 C046     		.align	2
 166              		.global	uip_task_process
 167              		.code	16
 168              		.thumb_func
 170              	uip_task_process:
 171              	.LFB1:
 172              		.loc 1 109 0
 173              		.cfi_startproc
 174 0094 F0B5     		push	{r4, r5, r6, r7, lr}
 175              		.cfi_def_cfa_offset 20
 176              		.cfi_offset 4, -20
 177              		.cfi_offset 5, -16
 178              		.cfi_offset 6, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181              		.loc 1 112 0
 182 0096 554C     		ldr	r4, .L31
 183 0098 2368     		ldr	r3, [r4]
 184 009a 9B68     		ldr	r3, [r3, #8]
 185 009c 00F0E2F8 		bl	.L33
 186              		.loc 1 114 0
 187 00a0 6368     		ldr	r3, [r4, #4]
 188 00a2 9842     		cmp	r0, r3
 189 00a4 1BD0     		beq	.L17
 190              	.LVL5:
 191              		.loc 1 116 0
 192 00a6 6060     		str	r0, [r4, #4]
 193              		.loc 1 118 0
 194 00a8 0028     		cmp	r0, #0
 195 00aa 14D0     		beq	.L18
 196              		.loc 1 120 0
 197 00ac 2368     		ldr	r3, [r4]
 198 00ae 1B68     		ldr	r3, [r3]
 199 00b0 00F0D8F8 		bl	.L33
 200              	.LVL6:
 201 00b4 4E4C     		ldr	r4, .L31+4
 202 00b6 011C     		mov	r1, r0
 203 00b8 0622     		mov	r2, #6
 204 00ba 201C     		mov	r0, r4
 205 00bc FFF7FEFF 		bl	memcpy
 206              		.loc 1 121 0
 207 00c0 4C4B     		ldr	r3, .L31+8
 208 00c2 1B68     		ldr	r3, [r3]
 209 00c4 002B     		cmp	r3, #0
 210 00c6 0AD0     		beq	.L17
 211              		.loc 1 124 0
 212 00c8 201C     		mov	r0, r4
 213 00ca 0621     		mov	r1, #6
 214 00cc FFF7FEFF 		bl	dhcpc_init
 215              		.loc 1 125 0
 216 00d0 FFF7FEFF 		bl	dhcpc_request
 217 00d4 03E0     		b	.L17
 218              	.LVL7:
 219              	.L18:
 220              		.loc 1 132 0
 221 00d6 2368     		ldr	r3, [r4]
 222 00d8 DB68     		ldr	r3, [r3, #12]
 223 00da 00F0C3F8 		bl	.L33
 224              	.LVL8:
 225              	.L17:
 226              		.loc 1 140 0
 227 00de 434C     		ldr	r4, .L31
 228 00e0 2368     		ldr	r3, [r4]
 229 00e2 0420     		mov	r0, #4
 230              	.LVL9:
 231 00e4 5B69     		ldr	r3, [r3, #20]
 232 00e6 00F0BDF8 		bl	.L33
 233              		.loc 1 142 0
 234 00ea 2368     		ldr	r3, [r4]
 235 00ec 9B69     		ldr	r3, [r3, #24]
 236 00ee 00F0B9F8 		bl	.L33
 237              		.loc 1 144 0
 238 00f2 2368     		ldr	r3, [r4]
 239 00f4 404D     		ldr	r5, .L31+12
 240 00f6 1B6A     		ldr	r3, [r3, #32]
 241 00f8 281C     		mov	r0, r5
 242 00fa 4049     		ldr	r1, .L31+16
 243 00fc 00F0B2F8 		bl	.L33
 244 0100 3F4E     		ldr	r6, .L31+20
 245 0102 0004     		lsl	r0, r0, #16
 246 0104 000C     		lsr	r0, r0, #16
 247              	.LVL10:
 248 0106 3080     		strh	r0, [r6]
 249              		.loc 1 148 0
 250 0108 0028     		cmp	r0, #0
 251 010a 2AD0     		beq	.L19
 252              		.loc 1 152 0
 253 010c 6F7B     		ldrb	r7, [r5, #13]
 254 010e 2B7B     		ldrb	r3, [r5, #12]
 255 0110 8020     		mov	r0, #128
 256              	.LVL11:
 257 0112 3F02     		lsl	r7, r7, #8
 258 0114 0001     		lsl	r0, r0, #4
 259 0116 1F43     		orr	r7, r7, r3
 260 0118 FFF7FEFF 		bl	htons
 261 011c 8742     		cmp	r7, r0
 262 011e 0CD1     		bne	.L20
 263              		.loc 1 154 0
 264 0120 FFF7FEFF 		bl	uip_arp_ipin
 265              		.loc 1 155 0
 266 0124 0120     		mov	r0, #1
 267 0126 FFF7FEFF 		bl	uip_process
 268              		.loc 1 160 0
 269 012a 3388     		ldrh	r3, [r6]
 270 012c 002B     		cmp	r3, #0
 271 012e 59D0     		beq	.L27
 272              		.loc 1 162 0
 273 0130 FFF7FEFF 		bl	uip_arp_out
 274              		.loc 1 163 0
 275 0134 2368     		ldr	r3, [r4]
 276 0136 3188     		ldrh	r1, [r6]
 277 0138 0EE0     		b	.L30
 278              	.L20:
 279              		.loc 1 166 0
 280 013a 6F7B     		ldrb	r7, [r5, #13]
 281 013c 2B7B     		ldrb	r3, [r5, #12]
 282 013e 3F02     		lsl	r7, r7, #8
 283 0140 3048     		ldr	r0, .L31+24
 284 0142 1F43     		orr	r7, r7, r3
 285 0144 FFF7FEFF 		bl	htons
 286 0148 8742     		cmp	r7, r0
 287 014a 4BD1     		bne	.L27
 288              		.loc 1 168 0
 289 014c FFF7FEFF 		bl	uip_arp_arpin
 290              		.loc 1 170 0
 291 0150 3188     		ldrh	r1, [r6]
 292 0152 0029     		cmp	r1, #0
 293 0154 46D0     		beq	.L27
 294              		.loc 1 171 0
 295 0156 2368     		ldr	r3, [r4]
 296              	.L30:
 297 0158 DB69     		ldr	r3, [r3, #28]
 298 015a 281C     		mov	r0, r5
 299 015c 00F082F8 		bl	.L33
 300 0160 40E0     		b	.L27
 301              	.LVL12:
 302              	.L19:
 303              		.loc 1 194 0
 304 0162 FFF7FEFF 		bl	t1_get_ms
 305              	.LVL13:
 306 0166 284B     		ldr	r3, .L31+28
 307 0168 1860     		str	r0, [r3]
 308              		.loc 1 196 0
 309 016a 284B     		ldr	r3, .L31+32
 310 016c 1968     		ldr	r1, [r3]
 311 016e 284A     		ldr	r2, .L31+36
 312 0170 411A     		sub	r1, r0, r1
 313 0172 9142     		cmp	r1, r2
 314 0174 36D9     		bls	.L27
 315              	.LBB2:
 316              		.loc 1 202 0
 317 0176 1860     		str	r0, [r3]
 318 0178 264F     		ldr	r7, .L31+40
 319              	.L23:
 320              		.loc 1 207 0
 321 017a 274B     		ldr	r3, .L31+44
 322 017c 0220     		mov	r0, #2
 323 017e 1F60     		str	r7, [r3]
 324 0180 FFF7FEFF 		bl	uip_process
 325              		.loc 1 212 0
 326 0184 3388     		ldrh	r3, [r6]
 327 0186 002B     		cmp	r3, #0
 328 0188 07D0     		beq	.L22
 329              		.loc 1 214 0
 330 018a FFF7FEFF 		bl	uip_arp_out
 331              		.loc 1 215 0
 332 018e 2368     		ldr	r3, [r4]
 333 0190 3188     		ldrh	r1, [r6]
 334 0192 DB69     		ldr	r3, [r3, #28]
 335 0194 281C     		mov	r0, r5
 336 0196 00F065F8 		bl	.L33
 337              	.L22:
 338              		.loc 1 205 0
 339 019a 204B     		ldr	r3, .L31+48
 340              		.loc 1 215 0
 341 019c D837     		add	r7, r7, #216
 342              		.loc 1 205 0
 343 019e 9F42     		cmp	r7, r3
 344 01a0 EBD1     		bne	.L23
 345 01a2 1F4C     		ldr	r4, .L31+52
 346              		.loc 1 223 0
 347 01a4 1F4E     		ldr	r6, .L31+56
 348              		.loc 1 228 0
 349 01a6 164F     		ldr	r7, .L31+20
 350              		.loc 1 231 0
 351 01a8 104D     		ldr	r5, .L31
 352              	.L25:
 353              		.loc 1 223 0
 354 01aa 3460     		str	r4, [r6]
 355 01ac 0520     		mov	r0, #5
 356 01ae FFF7FEFF 		bl	uip_process
 357              		.loc 1 228 0
 358 01b2 3B88     		ldrh	r3, [r7]
 359 01b4 002B     		cmp	r3, #0
 360 01b6 07D0     		beq	.L24
 361              		.loc 1 230 0
 362 01b8 FFF7FEFF 		bl	uip_arp_out
 363              		.loc 1 231 0
 364 01bc 2B68     		ldr	r3, [r5]
 365 01be 3988     		ldrh	r1, [r7]
 366 01c0 DB69     		ldr	r3, [r3, #28]
 367 01c2 0D48     		ldr	r0, .L31+12
 368 01c4 00F04EF8 		bl	.L33
 369              	.L24:
 370              		.loc 1 221 0
 371 01c8 174B     		ldr	r3, .L31+60
 372              		.loc 1 231 0
 373 01ca 4C34     		add	r4, r4, #76
 374              		.loc 1 221 0
 375 01cc 9C42     		cmp	r4, r3
 376 01ce ECD1     		bne	.L25
 377              		.loc 1 237 0
 378 01d0 164C     		ldr	r4, .L31+64
 379 01d2 2368     		ldr	r3, [r4]
 380 01d4 0133     		add	r3, r3, #1
 381 01d6 2360     		str	r3, [r4]
 382 01d8 7D2B     		cmp	r3, #125
 383 01da 03D1     		bne	.L27
 384              		.loc 1 239 0
 385 01dc FFF7FEFF 		bl	uip_arp_timer
 386              		.loc 1 240 0
 387 01e0 0023     		mov	r3, #0
 388 01e2 2360     		str	r3, [r4]
 389              	.L27:
 390              	.LBE2:
 391              		.loc 1 244 0
 392              		@ sp needed for prologue
 393 01e4 F0BC     		pop	{r4, r5, r6, r7}
 394 01e6 02BC     		pop	{r1}
 395 01e8 0847     		bx	r1
 396              	.L32:
 397 01ea C046     		.align	2
 398              	.L31:
 399 01ec 00000000 		.word	.LANCHOR0
 400 01f0 00000000 		.word	uip_ethaddr
 401 01f4 00000000 		.word	.LANCHOR1
 402 01f8 00000000 		.word	uip_buf
 403 01fc B0360000 		.word	14000
 404 0200 00000000 		.word	uip_len
 405 0204 06080000 		.word	2054
 406 0208 00000000 		.word	xCurrentTime
 407 020c 00000000 		.word	xStartTime
 408 0210 E7030000 		.word	999
 409 0214 00000000 		.word	uip_conns
 410 0218 00000000 		.word	uip_conn
 411 021c B0010000 		.word	uip_conns+432
 412 0220 00000000 		.word	uip_udp_conns
 413 0224 00000000 		.word	uip_udp_conn
 414 0228 30010000 		.word	uip_udp_conns+304
 415 022c 00000000 		.word	xARPTimer
 416              		.cfi_endproc
 417              	.LFE1:
 419              		.align	2
 420              		.global	uip_task_init
 421              		.code	16
 422              		.thumb_func
 424              	uip_task_init:
 425              	.LFB0:
 426              		.loc 1 91 0
 427              		.cfi_startproc
 428 0230 00B5     		push	{lr}
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 14, -4
 431              	.LVL14:
 432              		.loc 1 92 0
 433 0232 084B     		ldr	r3, .L36
 434 0234 1960     		str	r1, [r3]
 435              		.loc 1 93 0
 436 0236 084B     		ldr	r3, .L36+4
 437 0238 1860     		str	r0, [r3]
 438              		.loc 1 100 0
 439 023a FFF7FEFF 		bl	uip_init
 440              	.LVL15:
 441              		.loc 1 101 0
 442 023e FFF7FEFF 		bl	uip_arp_init
 443              		.loc 1 103 0
 444 0242 FFF7FEFF 		bl	t1_get_ms
 445 0246 054B     		ldr	r3, .L36+8
 446 0248 1860     		str	r0, [r3]
 447              		.loc 1 104 0
 448 024a 054B     		ldr	r3, .L36+12
 449 024c 0022     		mov	r2, #0
 450 024e 1A60     		str	r2, [r3]
 451              		.loc 1 106 0
 452              		@ sp needed for prologue
 453 0250 02BC     		pop	{r1}
 454 0252 0847     		bx	r1
 455              	.L37:
 456              		.align	2
 457              	.L36:
 458 0254 00000000 		.word	.LANCHOR0
 459 0258 00000000 		.word	.LANCHOR1
 460 025c 00000000 		.word	xStartTime
 461 0260 00000000 		.word	xARPTimer
 462              		.cfi_endproc
 463              	.LFE0:
 465              		.comm	uip_buf,14008,4
 466              		.comm	xCurrentTime,4,4
 467              		.comm	xStartTime,4,4
 468              		.comm	xARPTimer,4,4
 469              		.data
 470              		.align	2
 471              		.set	.LANCHOR1,. + 0
 474              	useDHCP:
 475 0000 01000000 		.word	1
 476              		.bss
 477              		.align	2
 478              		.set	.LANCHOR0,. + 0
 481              	netIF:
 482 0000 00000000 		.space	4
 485              	uip_task_last_linked:
 486 0004 00000000 		.space	4
 487              		.text
 488              	.Letext0:
 2926              		.code 16
 2927              		.align	1
 2928              	.L33:
 2929 0264 1847C046 		bx	r3
DEFINED SYMBOLS
                            *ABS*:00000000 uiptask.c
     /tmp/cc8C0JB6.s:1      .text:00000000 $t
     /tmp/cc8C0JB6.s:16     .text:00000000 uip_task_FastPoll
     /tmp/cc8C0JB6.s:33     .text:00000004 dhcpc_configured
     /tmp/cc8C0JB6.s:97     .text:00000050 $d
     /tmp/cc8C0JB6.s:110    .text:00000064 dispatch_udp_appcall
     /tmp/cc8C0JB6.s:107    .text:00000064 $t
     /tmp/cc8C0JB6.s:140    .text:00000084 $d
     /tmp/cc8C0JB6.s:149    .text:00000088 dispatch_tcp_appcall
     /tmp/cc8C0JB6.s:146    .text:00000088 $t
     /tmp/cc8C0JB6.s:170    .text:00000094 uip_task_process
     /tmp/cc8C0JB6.s:399    .text:000001ec $d
                            *COM*:000036b8 uip_buf
                            *COM*:00000004 xCurrentTime
                            *COM*:00000004 xStartTime
                            *COM*:00000004 xARPTimer
     /tmp/cc8C0JB6.s:424    .text:00000230 uip_task_init
     /tmp/cc8C0JB6.s:421    .text:00000230 $t
     /tmp/cc8C0JB6.s:458    .text:00000254 $d
     /tmp/cc8C0JB6.s:474    .data:00000000 useDHCP
     /tmp/cc8C0JB6.s:475    .data:00000000 $d
     /tmp/cc8C0JB6.s:481    .bss:00000000 netIF
     /tmp/cc8C0JB6.s:485    .bss:00000004 uip_task_last_linked
     /tmp/cc8C0JB6.s:2926   .text:00000264 $t

UNDEFINED SYMBOLS
resolv_conf
dhcp_configured_uip
uip_hostaddr
uip_netmask
uip_draddr
uip_sntpaddr
uip_timeoffset
dhcpc_appcall
resolv_appcall
dispatch_udp_appcall_uip
uip_udp_conn
dispatch_tcp_appcall_uip
memcpy
dhcpc_init
dhcpc_request
htons
uip_arp_ipin
uip_process
uip_arp_out
uip_arp_arpin
t1_get_ms
uip_arp_timer
uip_ethaddr
uip_len
uip_conns
uip_conn
uip_udp_conns
uip_init
uip_arp_init
